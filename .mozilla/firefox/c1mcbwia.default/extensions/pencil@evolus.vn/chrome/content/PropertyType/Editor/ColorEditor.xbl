<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:html="http://www.w3.org/1999/xhtml" 
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:p="http://www.evolus.vn/Namespace/Pencil"
          >
    <binding id="colorEditor">
        <implementation>
            <constructor>
            <![CDATA[
                
                this.colorPicker = document.getAnonymousElementByAttribute(this, "aid", "colorPicker");
                this.colorCode = document.getAnonymousElementByAttribute(this, "aid", "colorCode");
                this.previewBox = document.getAnonymousElementByAttribute(this, "aid", "previewBox");
                this.opacity = document.getAnonymousElementByAttribute(this, "aid", "opacity");
                this.opacityText = document.getAnonymousElementByAttribute(this, "aid", "opacityText");
                
                this.colorCode._control = this;

                this.isUserModified = false;

                var thiz = this;

                this.colorCode.addEventListener("change", function (event) {
                    thiz._handleColorCodeChange();
                }, false);
                
                this.colorPicker.addEventListener("ValueChange", function(event) {
                    thiz._handleColorPickerValueChange();
                }, false);
                
                this.opacity.addEventListener("change", function(event) {
                    thiz.opacityText.value = "Opacity: " + thiz.opacity.value + "%";
                    thiz._updatePreviewColor();
                    event.stopPropagation();
                }, false);
                
                this.opacity.addEventListener("mouseup", function(event) {
                    thiz._fireModifiedEvent();
                }, false);
                
                this._handleColorPickerValueChange = function (event) {
                    thiz.colorCode.value = this.colorPicker.getColor().toRGBString();
                    thiz._updatePreviewColor();
                    
                    thiz._fireModifiedEvent();
                };
                
                this._handleColorCodeChange = function (event) {
                    var s = this.colorCode.value;
                    if (s.match(/^#[a-f0-9]{6,6}$/i)) {
                        this.colorPicker.setColor(Color.fromString(s + "FF"));
                        thiz._updatePreviewColor();
                        
                        this._fireModifiedEvent();
                    }
                };
                
                this._fireModifiedEvent = function () {
                    thiz.isUserModified = true;
                    
                    var event = document.createEvent("Events");
                    event.initEvent("modify", false, false);
                    thiz.dispatchEvent(event);
                };
                
                if (this.hasAttribute("value")) {
                    this.setValue(Color.fromString(this.getAttribute("value")));
                }
                
            ]]>
            </constructor>
            <method name="setTypeMeta">
                <parameter name="meta"/>
                <body>
                <![CDATA[
                    this.meta = meta;
                ]]>
                </body>
            </method>        
            <method name="setValue">
                <parameter name="color"/>
                <body>
                <![CDATA[
                    var colorText = color.toRGBString();

                    try {                    
                        if (this.colorPicker && this.colorPicker.setColor)
                            this.colorPicker.setColor(color);
                    } catch (e) {
                    }
                    this.colorCode.value = colorText;
                    var a = Math.round(color.a * 100) % 101;
                    this.opacity.setAttribute("value", a);
                    this.opacityText.setAttribute("value", "Opacity: " + a + "%");
                    
                    this.isUserModified = false;
                    
                    this._updatePreviewColor(color);
                ]]>
                </body>
            </method>        
            <method name="_updatePreviewColor">
                <parameter name="c"/>
                <body>
                <![CDATA[
                    try {
                        var color = c ? c : this.getValue();
                        this.previewBox.style.backgroundColor = color.toRGBString();
                        this.previewBox.style.opacity = color.a;                    
                    } catch (e) {
                        //Console.dumpError(e);
                    }
                ]]>
                </body>
            </method>        
            <method name="getValue">
                <body>
                <![CDATA[
                    var color = null;
                    if (this.colorCode.value.match(/^#[a-f0-9]{6,6}$/i)) {
                        color = Color.fromString(this.colorCode.value + "FF");
                    } else {
                        color = (this.colorPicker && this.colorPicker.getColor) ? this.colorPicker.getColor():
                                Color.fromString(this.getAttribute("value"));
                    }
                    
                    color.a = this.opacity.value / 100;
                    
                    return color;
                ]]>
                </body>
            </method>        
            <method name="isModified">
                <body>
                <![CDATA[
                    return this.isUserModified;
                ]]>
                </body>
            </method>        
        </implementation>
        <content>
            <hbox xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" flex="1">
                <pwheelcolorpicker aid="colorPicker" flex="1" xbl:inherits="disabled,color=value"/>
                <vbox>
                    <label value="HTML code" xbl:inherits="disabled"/>
                    <textbox aid="colorCode" xbl:inherits="disabled"/>
                    <label value="Opacity: 100%" xbl:inherits="disabled" aid="opacityText"/>
                    <scale aid="opacity" min="0" max="100" xbl:inherits="disabled"/>
                    <label value="Preview" xbl:inherits="disabled"/>
                    <hbox pack="center">
                        <box aid="previewContainer">
                            <box aid="previewBox"/>
                        </box>
                    </hbox>
                </vbox>
            </hbox>
        </content>
    </binding>
</bindings>
